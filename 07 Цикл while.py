#  07 Цикл while
""""""


"""   T A S K S   """


# Task 01
"""
По данному целому числу N распечатайте все квадраты натуральных чисел, не превосходящие N, в порядке возрастания.
Input:  50
Output: 1 4 9 16 25 36 49
"""
n = int(input())
num = res = 1

while n >= res:
    print(res, end=' ')
    num += 1
    res = num ** 2


# Решение без квадратов
n = int(input())
num = res = 1

while res <= n:
    print(res, end=' ')
    num += 2
    res += num


# Task 02
""" 
«Минимальный делитель»
Дано целое число, не меньшее 2. Выведите его наименьший натуральный делитель, отличный от 1.
Input:  15
Output: 3
"""
n = int(input())
d = 2
while n % d:
    d += 1
print(d)

# Длинно
n = int(input())
ls = [el for el in range(2, n // 2 + 1) if not n % el]
if ls:
    print(ls[0])
else:
    print(n)


# Task 03
""" 
«Степень двойки»
По данному натуральному числу N найдите наибольшую целую степень двойки, не превосходящую N. 
Выведите показатель степени и саму степень. 
Операцию возведения в степень рекомендуется не использовать. 
Input:  50
Output: 5 32
"""
n = int(input())
degree = 0
res = 1

while res * 2 <= n:
    res *= 2
    degree += 1

print(degree, res)


# Task 04
""" 
«Утренняя пробежка»
В первый день спортсмен пробежал x километров, 
а затем он каждый день увеличивал пробег на 10% от предыдущего значения. 
По данному числу y определите номер дня, на который пробег спортсмена составит не менее  y  километров. 
Программа получает на вход действительные числа  x, y  и должна вывести одно натуральное число.
Input:  10
        20
Output: 9
"""
x, y = int(input()), int(input())
day = 1  # как минимум день бежит

while x < y:
    x *= 1.1
    day += 1

print(day)


# Task 05
""" 
«Длина последовательности»
Программа получает на вход последовательность целых неотрицательных чисел, 
каждое число записано в отдельной строке. 
Последовательность завершается числом 0, 
при считывании которого программа должна закончить свою работу 
и вывести количество членов последовательности (не считая завершающего числа 0). 
Числа, следующие за числом 0, считывать не нужно.
Input:  1
        7
        9
        0
        5
Output: 3
"""
cnt = 0

while int(input()):
    cnt += 1

print(cnt)


# Task 06
""" 
«Сумма последовательности»
Определите сумму всех элементов последовательности, завершающейся числом 0. 
В этой и во всех следующих задачах числа, следующие за первым нулем, учитывать не нужно.
Input:  1
        7
        9
        0
        5
Output: 17
"""
res = 0
n = int(input())

while n:
    res += n
    n = int(input())

print(res)


# Task 07
""" 
«Среднее значение последовательности»
Определите среднее значение всех элементов последовательности, завершающейся числом 0. 
Input:  1
        7
        9
        0
        5
Output: 5.666666666666667
"""
n = int(input())
cnt = res = 0

while n:
    res += n
    cnt += 1
    n = int(input())

print(res/cnt)


# Task 08
""" 
«Максимум последовательности»
Последовательность состоит из натуральных чисел и завершается числом 0. 
Определите значение наибольшего элемента последовательности.. 
Input:  1
        7
        9
        0
        5
Output: 9
"""
res = n = int(input())

while n:
    if res < n:
        res = n
    n = int(input())

print(res)


# Task 09
""" 
«Количество четных элементов последовательности»
Определите количество четных элементов в последовательности, завершающейся числом 0
"""
res = n = int(input())
cnt = 0

while n:
    if not n % 2:
        cnt += 1
    n = int(input())

print(cnt)


# Task 10
""" 
«Сумма цифр произвольного числа»
Дано произвольное натуральное число. Найдите сумму его цифр
Input:  179
Output: 17
"""
n = int(input())
res = 0

while n:
    res += n % 10
    n //= 10

print(res)


# Task 11
""" 
«Количество элементов, которые больше предыдущего»
Последовательность состоит из натуральных чисел и завершается числом 0.
Определите, сколько элементов этой последовательности больше предыдущего элемента.
Input:  1
        7
        9
        0
Output: 2
"""
a = int(input())
cnt = 0

while a:
    b = int(input())
    cnt += b > a
    a = b

print(cnt)


# Task 12
""" 
«Второй максимум»
Последовательность состоит из различных натуральных чисел и завершается числом 0. 
Определите значение второго по величине элемента в этой последовательности. 
Гарантируется, что в последовательности есть хотя бы два элемента.
Input:  1
        7
        9
        0
Output: 7
"""
first = second = 0
num = int(input())

while num:
    if num > first:
        second, first = first, num
    elif num > second:
        second = num
    num = int(input())
print(second)


# Вариант для любого целого числа
first, second, num = (int(input())for _ in range(3))

if first < second:
    first, second = second, first

while num:
    if num > first:
        second, first = first, num
    elif num > second:
        second = num
    num = int(input())
print(second)


# Task 13
""" 
«Количество элементов, равных максимуму»
Последовательность состоит из натуральных чисел и завершается числом 0. 
Определите, сколько элементов этой последовательности равны ее наибольшему элементу.
Input:  1
        7
        9
        0
Output: 1
"""
greater = cnt = 0
num = int(input())

while num:
    if num > greater:
        greater, cnt = num, 1
    elif num == greater:
        cnt += 1
    num = int(input())

print(cnt)


# Task 14
""" 
«Номер числа Фибоначчи»
Дано натуральное число A. Определите, каким по счету числом Фибоначчи оно является.
Если A не является числом Фибоначчи, выведите число -1.
Последовательность Фибоначчи:  f0=0, f1=1, f2=f1+f0 ... fn=fn-1 + fn-2  -> 0, 1, 1, 2, 3, 5, 8, 13, 21
Input:  8
Output: 6
"""
n = int(input())
a, b, cnt = 0, 1, 0

while a < n:
    a, b = a + b, a
    cnt += 1
else:
    print((-1, cnt)[a == n])

# Короче
n = int(input())
a, b, cnt = 0, 1, 0

while a < n:
    a, b, cnt = a + b, a, cnt + 1
else:
    print((-1, cnt)[a == n])


# Task 15
"""
https://stepik.org/lesson/1055918/step/15?unit=1065227
«Максимальное число идущих подряд равных элементов»
Дана последовательность натуральных чисел, завершающаяся числом 0.
Определите, какое наибольшее число подряд идущих элементов этой последовательности равны друг другу.
Input:  1
        7
        7
        9
        1
        0
Output: 2
"""
# Решение подстроенное под тесты. Если элементы не нашлись, то выводится 1
current, equal = int(input()), -1
cnt = cnt_max = 1

while current:
    if equal == current:
        cnt += 1
        if cnt > cnt_max:
            cnt_max = cnt
    else:
        cnt = 1
    equal = current
    current = int(input())

print(cnt_max)


# На мой взгляд, это более верное решение
num, equal = int(input()), -1
cnt = cnt_max = 1
flag = False  # Нашлась ли хоть одна последовательность

while num:
    if equal == num:
        flag = True
        cnt += 1
        if cnt > cnt_max:
            cnt_max = cnt
    else:
        cnt = 1
    equal = num
    num = int(input())

print((0, cnt_max)[flag])  # Если не нашлось такой последовательности, то выводим 0


# Task 16
"""
«Стандартное отклонение»
https://stepik.org/lesson/1055918/step/16?unit=1065227
"""
from math import sqrt
n = s1 = s2 = 0
a = int(input())

while a:
    n += 1
    s1 += a
    s2 += a**2
    a = int(input())

s = s1 / n
sigma = sqrt((s2 - 2 * s * s1 + n * s**2) / (n - 1))
print(round(sigma, 3))
