#  08 Строки
""""""


"""   T A S K S   """


# Task 02
""" 
«Делаем срезы»
https://stepik.org/lesson/1055917/step/1?unit=1065226
8) все символы строки через один в обратном порядке, начиная с последнего. 
Input:  'Abrakadabra'
Output: abdkrA
"""
# s = input()
s = 'Abrakadabra'

print(s[2])
print(s[-2])
print(s[:5])
print(s[:-2])
print(s[::2])
print(s[1::2])
print(s[::-1])
print(s[::-2])  # 8
print(len(s))


# Task 02
""" 
«Количество слов»
Дана строка, состоящая из слов, разделенных пробелами. 
Определите, сколько в ней слов. Используйте для решения задачи метод count.
Input:  Hello world
Output: 2
"""
s = input().strip()

print(s.count(' ') + 1)
# print(len(s.split()))


# Task 03
""" 
«Две половинки»
Дана строка. Разрежьте ее на две равные части (если длина строки — четная, а если длина строки нечетная, 
то длина первой части должна быть на один символ больше). Переставьте эти две части местами, 
результат запишите в новую строку. 
При решении этой задачи не стоит пользоваться инструкцией if.
Input:  Hi
Output: iH
"""
s = input()

idx = (len(s) + 1) // 2
# idx = len(s) // 2 + 1 * len(s) % 2
print(s[idx:] + s[:idx])


# Task 04
""" 
«Переставить два слова»
Дана строка, состоящая ровно из двух слов, разделенных пробелом. 
Переставьте эти слова местами. Результат запишите в строку и выведите получившуюся строку. 
При решении этой задачи не стоит пользоваться инструкцией if.
Input:  Hello, world!
Output: world! Hello,
"""
s = input()

ls = s.split(' ')
print(ls[1], ls[0])

# Вариант
inx = s.find(' ')
print(s[inx + 1:] + s[:inx])

# Оригинальное решение
print(*input().split()[::-1])


# Task 05
""" 
«Первое и последнее вхождения»
Дана строка. Если в этой строке буква f встречается только один раз, выведите её индекс. 
Если она встречается два и более раз, выведите индекс её первого и последнего появления. 
Если буква f в данной строке не встречается, ничего не выводите.
Input:  comfort
Output: 3
"""
s = input()

cnt = s.count('f')

if cnt == 1:
    print(s.find('f'))
elif cnt > 1:
    print(s.find('f'), s.rfind('f'))


# Task 06
""" 
«Второе вхождение»
Дана строка. Найдите в этой строке второе вхождение буквы f, и выведите индекс этого вхождения. 
Если буква f в данной строке встречается только один раз, выведите число -1, 
а если не встречается ни разу, выведите число -2
Input:  comfort
Output: -1
"""
s = input()

cnt = s.count('f')

if cnt > 1:
    idx = s.find('f')
    print(s.find('f', idx + 1))
elif cnt == 1:
    print(-1)
else:
    print(-2)


# Task 07
""" 
Удаление фрагмента»
Дана строка, в которой буква h встречается минимум два раза. У
далите из этой строки первое и последнее вхождение буквы h, 
а также все символы, находящиеся между ними.
"""
s = input()
idx_1 = s.find('h')
idx_2 = s.rfind('h')

print(s[:idx_1] + s[idx_2 + 1:])


# Task 08
""" 
«Палиндром»
Дана строка, состоящая из произвольных символов. Определите, является ли она палиндромом. 
Если да, то выведите YES, если нет, то выведите NO
Input:  ABCBA
Output: YES
"""
s = input()
if s == s[::-1]:
    print('YES')
else:
    print('NO')

# Вариант через побитовую инверсию
s = input()
flag = True

for idx in range(len(s) // 2):
    if s[idx] != s[~idx]:
        flag = False
        break
print(('NO', 'YES')[flag])


# Task 09
""" 
«Обращение фрагмента»
Дана строка, в которой буква h встречается как минимум два раза. 
Разверните последовательность символов, заключенную между первым 
и последним появлением буквы h, в противоположном порядке.
Input:  In the hole in the ground there lived a hobbit
Output: In th a devil ereht dnuorg eht ni eloh ehobbit
"""
s = input()
idx_1, idx_2 = s.find('h'), s.rfind('h')
print(s[:idx_1] + s[idx_2:idx_1:-1] + s[idx_2:])

# Вариант
s = input()
ind1, ind2 = s.find('h'), s.rfind('h')
part1 = s[:ind1]
part2 = s[ind1:ind2 + 1][::-1]
part3 = s[ind2 + 1:]
print(part1 + part2 + part3)


# Task 10
""" 
«Замена подстроки»
Дана строка. Замените в этой строке все цифры 1 на слово one.
Input:  1+1=2
Output: one+one=2
"""
s = input()
res = s.replace('1', 'one')
print(res)


# Task 11
""" 
«Удаление символа»
Дана строка. Удалите из этой строки все символы @
"""
s = input()
res = s.replace('@', '')
print(res)


# Task 12
""" 
«Замена внутри фрагмента»
Дана строка. Замените в этой строке все появления буквы h на букву H, 
кроме первого и последнего вхождения.
Input:  In the hole in the ground there lived a hobbit
Output: In the Hole in tHe ground tHere lived a hobbit
"""
s = input()
idx1, idx2 = s.find('h'), s.rfind('h')
one = s[:idx1 +1]
two = s[idx1 + 1:idx2].replace('h', 'H', )
three = s[idx2:]
print(one + two + three)


# Task 13
""" 
«Удалить каждый третий символ»
Дана строка. Удалите из нее все символы, чьи индексы делятся на 3.
Input:  Python
Output: yton
"""
s = input()
print(''.join(el for i, el in enumerate(s) if i % 3))

# Вариант
s = list(input())
del s[::3]
print(''.join(s))


# Task 14
""" 
«Изменить регистр символа»
Измените регистр символа, если он был латинской буквой: 
сделайте его заглавным, если он был строчной буквой и наоборот. 
Вводится всегда один символ. 
Input:  abcd_123_EFG_йюя
Output: ABCD_123_efg_йюя
"""
# только для латиницы
s = input()
if 97 <= ord(s) <= 122:
    print(s.upper())
elif 65 <= ord(s) <= 90:
    print(s.lower())
else:
    print(s)

# Просто
print(input().swapcase())


# Task 15
""" 
Задача «Пингвины»
Напишите программу, которая по данному числу n от 1 до 9 выводит на экран n пингвинов. 
Изображение одного пингвина имеет размер 5×9 символов, 
между двумя соседними пингвинами также имеется пустой (из пробелов) столбец. 
Для упрощения рисования скопируйте пингвина из примера в среду разработки.
   _~_   
  (o o)  
 /  V  \ 
/(  _  )\
  ^^ ^^  
"""
n = int(input())
s1 = '_~_'.center(9) + ' '
s2 = '(o o)'.center(9) + ' '
s3 = '/  V  \\'.center(9) + ' '
s4 = '/(  _  )\\'.center(9) + ' '
s5 = '^^ ^^'.center(9) + ' '
print(s1 * n, s2 * n, s3 * n, s4 * n, s5 * n, sep='\n')


# n = int(input())
s1 = '_~_'.center(9)
s2 = '(o o)'.center(9)
s3 = '/  V  \\'.center(9)
s4 = '/(  _  )\\'.center(9)
s5 = '^^ ^^'.center(9)
res = zip(*[[s1, s2, s3, s4, s5]] * n)
print(*map(' '.join, res), sep='\n')

# Task 16
""" 
«Шифр Цезаря»
Шифр Цезаря один из наиболее древнейших известных шифров. 
Схема шифрования: используется сдвиг буквы алфавита на фиксированное число позиций n. 
В текущей задаче мы будем рассматривать сдвиг на n >= 0. Зашифруйте данную строку по этому принципу. 
Строка состоит только из строчных букв английского алфавита.
ord(a) = 97, ord(z) = 122,  26 букв
Input:  hellobob
        1
Output: ifmmpcpc
"""
s = input()
n = int(input())

res = ''
for el in s:
    res += chr(97 + (ord(el) + n - 97) % 26)
print(res)

